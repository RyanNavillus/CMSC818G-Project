CRC Handbook of Computer Science and Engineering, 2nd Edition, Ch. 97, Wednesday, February 25, 2004, 8:00 pm. © CRC Press. 1
1 Introduction
The fundamental purpose of a type system is to prevent the occurrence of execution errors during the running of a program. This informal statement motivates the study of type systems, but
requires clarification. Its accuracy depends, first of all, on the rather subtle issue of what constitutes an execution error, which we will discuss in detail. Even when that is settled, the absence
of execution errors is a nontrivial property. When such a property holds for all of the program
runs that can be expressed within a programming language, we say that the language is type
sound. It turns out that a fair amount of careful analysis is required to avoid false and embarrassing claims of type soundness for programming languages. As a consequence, the classification, description, and study of type systems has emerged as a formal discipline.
The formalization of type systems requires the development of precise notations and definitions, and the detailed proof of formal properties that give confidence in the appropriateness
of the definitions. Sometimes the discipline becomes rather abstract. One should always remember, though, that the basic motivation is pragmatic: the abstractions have arisen out of necessity
and can usually be related directly to concrete intuitions. Moreover, formal techniques need not
be applied in full in order to be useful and influential. A knowledge of the main principles of
type systems can help in avoiding obvious and not so obvious pitfalls, and can inspire regularity
and orthogonality in language design.
When properly developed, type systems provide conceptual tools with which to judge the
adequacy of important aspects of language definitions. Informal language descriptions often fail
to specify the type structure of a language in sufficient detail to allow unambiguous implementation. It often happens that different compilers for the same language implement slightly different type systems. Moreover, many language definitions have been found to be type unsound,
allowing a program to crash even though it is judged acceptable by a typechecker. Ideally, formal type systemsshould be part of the definition of all typed programming languages. This way,
typechecking algorithms could be measured unambiguously against precise specifications and,
if at all possible and feasible, whole languages could be shown to be type sound.
In this introductory section we present an informal nomenclature for typing, execution errors, and related concepts. We discuss the expected properties and benefits of type systems, and
we review how type systems can be formalized. The terminology used in the introduction is not
completely standard; this is due to the inherent inconsistency of standard terminology arising
from various sources. In general, we avoid the words type and typing when referring to run time
concepts; for example we replace dynamic typing with dynamic checking and avoid common
but ambiguous terms such as strong typing. The terminology is summarized in the Defining
Terms section.
Type Systems
Luca Cardelli
Microsoft Research
2 CRC Handbook of Computer Science and Engineering, 2nd Edition, Ch. 97, Wednesday, February 25, 2004, 8:00 pm. © CRC Press.
In section 2, we explain the notation commonly used for describing type systems. We review judgments, which are formal assertions about the typing of programs, type rules, which
are implications between judgments, and derivations, which are deductions based on type rules.
In section 3, we review a broad spectrum of simple types, the analog of which can be found in
common languages, and we detail their type rules. In section 4, we present the type rules for a
simple but complete imperative language. In section 5, we discuss the type rules for some advanced type constructions: polymorphism and data abstraction. In section 6, we explain how
type systems can be extended with a notion of subtyping. Section 7 is a brief commentary on
some important topics that we have glossed over. In section 8, we discuss the type inference
problem, and we present type inference algorithms for the main type systems that we have considered. Finally, section 9 is a summary of achievements and future directions.
Execution errors
The most obvious symptom of an execution error is the occurrence of an unexpected software
fault, such as an illegal instruction fault or an illegal memory reference fault.
There are, however, more subtle kinds of execution errors that result in data corruption
without any immediate symptoms. Moreover, there are software faults, such as divide by zero
and dereferencing nil, that are not normally prevented by type systems. Finally, there are languages lacking type systems where, nonetheless, software faults do not occur. Therefore we
need to define our terminology carefully, beginning with what is a type.
Typed and untyped languages
A program variable can assume a range of values during the execution of a program. An upper
bound of such a range is called a type of the variable. For example, a variable x of type Boolean
is supposed to assume only boolean values during every run of a program. If x has type Boolean,
then the boolean expression not(x) has a sensible meaning in every run of the program. Languages where variables can be given (nontrivial) types are called typed languages.
Languages that do not restrict the range of variables are called untyped languages: they do
not have types or, equivalently, have a single universal type that contains all values. In these languages, operations may be applied to inappropriate arguments: the result may be a fixed arbitrary value, a fault, an exception, or an unspecified effect. The pure λ-calculusis an extreme case
of an untyped language where no fault ever occurs: the only operation is function application
and, since all values are functions, that operation never fails.
A type system is that component of a typed language that keeps track of the types of variables and, in general, of the types of all expressions in a program. Type systems are used to determine whether programs are well behaved (as discussed subsequently). Only program sources
that comply with a type system should be considered real programs of a typed language; the other sources should be discarded before they are run.
A language is typed by virtue of the existence of a type system for it, whether or not types
actually appear in the syntax of programs. Typed languages are explicitly typed if types are part
of the syntax, and implicitly typed otherwise. No mainstream language is purely implicitly
typed, but languages such as ML and Haskell support writing large program fragments where
CRC Handbook of Computer Science and Engineering, 2nd Edition, Ch. 97, Wednesday, February 25, 2004, 8:00 pm. © CRC Press. 3
type information is omitted; the type systems of those languages automatically assign types to
such program fragments.
Execution errors and safety
It is useful to distinguish between two kinds of execution errors: the ones that cause the computation to stop immediately, and the ones that go unnoticed (for a while) and later cause arbitrary
behavior. The former are called trapped errors, whereas the latter are untrapped errors.
An example of an untrapped error is improperly accessing a legal address, for example, accessing data past the end of an array in absence of run time bounds checks. Another untrapped
error that may go unnoticed for an arbitrary length of time is jumping to the wrong address:
memory there may or may not represent an instruction stream. Examples of trapped errors are
division by zero and accessing an illegal address: the computation stops immediately (on many
computer architectures).
A program fragment is safe if it does not cause untrapped errors to occur. Languages where
all program fragments are safe are called safe languages. Therefore, safe languages rule out the
most insidious form of execution errors: the ones that may go unnoticed. Untyped languages
may enforce safety by performing run time checks. Typed languages may enforce safety by statically rejecting all programsthat are potentially unsafe. Typed languages may also use a mixture
of run time and static checks.
Although safety is a crucial property of programs, it is rare for a typed language to be concerned exclusively with the elimination of untrapped errors. Typed languages usually aim to rule
out also large classes of trapped errors, along with the untrapped ones. We discuss these issues
next.
Execution errors and well-behaved programs
For any given language, we may designate a subset of the possible execution errors as forbidden errors. The forbidden errors should include all of the untrapped errors, plus a subset of the
trapped errors. A program fragment is said to have good behavior, or equivalently to be well
behaved, if it does not cause any forbidden error to occur. (The contrary is to have bad behavior,
or equivalently to be ill behaved.) In particular, a well behaved fragment is safe. A language
where all of the (legal) programs have good behavior is called strongly checked.
Thus, with respect to a given type system, the following holds for a strongly checked language:
• No untrapped errors occur (safety guarantee).
• None of the trapped errors designated as forbidden errors occur.
• Other trapped errors may occur; it is the programmer’s responsibility to avoid them.
Typed languages can enforce good behavior (including safety) by performing static (i.e.,
compile time) checks to prevent unsafe and ill behaved programs from ever running. These languages are statically checked; the checking process is called typechecking, and the algorithm
that performs this checking is called the typechecker. A program that passes the typechecker is
said to be well typed; otherwise, it is ill typed, which may mean that it is actually ill-behaved,
4 CRC Handbook of Computer Science and Engineering, 2nd Edition, Ch. 97, Wednesday, February 25, 2004, 8:00 pm. © CRC Press.
or simply that it could not be guaranteed to be well behaved. Examples of statically checked languages are ML, Java, and Pascal (with the caveat that Pascal has some unsafe features).
Untyped languages can enforce good behavior (including safety) in a different way, by performing sufficiently detailed run time checks to rule out all forbidden errors. (For example, they
may check all array bounds, and all division operations, generating recoverable exceptions when
forbidden errors would happen.) The checking process in these languages is called dynamic
checking; LISP is an example of such a language. These languages are strongly checked even
though they have neither static checking, nor a type system.
Even statically checked languages usually need to perform tests at run time to achieve safety. For example, array bounds must in general be tested dynamically. The fact that a language
is statically checked does not necessarily mean that execution can proceed entirely blindly.
Several languages take advantage of their static type structuresto perform sophisticated dynamic tests. For example Simula67’s INSPECT, Modula-3’s TYPECASE, and Java’s instanceof constructs discriminate on the run time type of an object. These languages are still (slightly
improperly) considered statically checked, partially because the dynamic type tests are defined
on the basis of the static type system. That is, the dynamic tests for type equality are compatible
with the algorithm that the typechecker uses to determine type equality at compile time.
Lack of safety
By our definitions, a well behaved program is safe. Safety is a more primitive and perhaps more
important property than good behavior. The primary goal of a type system is to ensure language
safety by ruling out all untrapped errors in all program runs. However, most type systems are
designed to ensure the more general good behavior property, and implicitly safety. Thus, the declared goal of a type system is usually to ensure good behavior of all programs, by distinguishing
between well typed and ill typed programs.
In reality, certain statically checked languages do not ensure safety. That is, their set of forbidden errors does not include all untrapped errors. These languages can be euphemistically
called weakly checked (or weakly typed, in the literature) meaning that some unsafe operations
are detected statically and some are not detected. Languages in this class vary widely in the extent of their weakness. For example, Pascal is unsafe only when untagged variant types and
function parameters are used, whereas C has many unsafe and widely used features, such as
pointer arithmetic and casting. It is interesting to notice that the first five of the ten commandments for C programmers [30] are directed at compensating for the weak-checking aspects of
C. Some of the problems caused by weak checking in C have been alleviated in C++, and even
more have been addressed in Java, confirming a trend away from weak checking. Modula-3 supports unsafe features, but only in modulesthat are explicitly marked as unsafe, and prevents safe
modules from importing unsafe interfaces.
Most untyped languages are, by necessity, completely safe (e.g., LISP). Otherwise, programming would be too frustrating in the absence of both compile time and run time checks to
protect against corruption. Assembly languages belong to the unpleasant category of untyped
unsafe languages.
CRC Handbook of Computer Science and Engineering, 2nd Edition, Ch. 97, Wednesday, February 25, 2004, 8:00 pm. © CRC Press. 5
Table 1. Safety
Should languages be safe?
Some languages, like C, are deliberately unsafe because of performance considerations: the run
time checks needed to achieve safety are sometimes considered too expensive. Safety has a cost
even in languages that do extensive static analysis: tests such as array bounds checks cannot be,
in general, completely eliminated at compile time.
Still, there have been many efforts to design safe subsets of C, and to produce development
toolsthat try to execute C programssafely by introducing a variety of (relatively expensive) runtime checks. These efforts are due to two main reasons: the widespread use of C in applications
that are not largely performance critical, and the security problems introduced by unsafe C programs. The security problems includes buffer overflows and underflows caused by pointer arithmetic or by lack of array bounds checks, that can lead to overwriting arbitrary areas of memory
and that can be exploited for attacks.
Safety is cost effective according to different measures that just pure performance. Safety
produces fail-stop behavior in case of execution errors, reducing debugging time. Safety guarantees the integrity of run time structures, and therefore enables garbage collection. In turn, garbage collection considerably reduces code size and code development time, at the price of some
performance. Finally, safety has emerged as a necessary foundation for systems security, particularly for systems(such as operating system kernels and web browsers) that load and run foreign
code. Systems security is becoming one of the most expensive aspects of program development
and maintenance, and safety can reduce such costs.
Thus, the choice between a safe and unsafe language may be ultimately related to a tradeoff between development and maintenance time, and execution time. Although safe languages
have been around for many decades, it is only recently that they are becoming mainstream,
uniquely because of security concerns.
Should languages be typed?
The issue of whether programming languages should have types is still subject to some debate.
There is little doubt that production code written in untyped languages can be maintained only
with great difficulty. From the point of view of maintainability, even weakly checked unsafe
languages are superior to safe but untyped languages (e.g., C vs. LISP). Here are the arguments
that have been put forward in favor of typed languages, from an engineering point of view:
• Economy of execution. Type information was first introduced in programming to improve code generation and run time efficiency for numerical computations, for example,
in FORTRAN. In ML, accurate type information eliminates the need for nil-checking on
pointer dereferencing. In general, accurate type information at compile time leads to the
application of the appropriate operations at run time without the need of expensive tests.
Typed Untyped
Safe ML, Java LISP
Unsafe C Assembler
